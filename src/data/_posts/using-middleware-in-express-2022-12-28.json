{
  "layout": "blog",
  "language": "en",
  "date": "2022-12-27T13:19:15.965Z",
  "title": "Using middleware in Express",
  "body": "Middlewares are functions that do a specific task, in a specific order and hand over to the next middleware once done. How can we use this?\n\nMiddlewares are usually introduced to a developer when needing a third-party solution to be used globally with `app.use()`. This post is about using middlewares on a single HTTP-request method.\n\nMiddlewares are functions called between a request and your final response. The simplest form of a middleware is the arrow function that responds with \"Hello World\" from a GET-request:\n\n```\napp.get(\"/\", (res, req) => {\n  res.send(\"Hello World\")\n})\n\n// This arrow function is the middleware used above\n(res, req) => { res.send(\"Hello World\") }\n\n// Client gets back: \"Hello World\"\n```\n\nExpress considers every argument after the initial path-argument to be middleware. There is no limit to how many middlewares you have.\n\nWhat is important to note is that each middleware hands over the request to the next middleware once done. Because `Express` does not know when the middleware is done with the task; it listens for `next()`. For the middleware to use `next()`, it has to add next as it's last parameter. Middleware that is last in the chain can omit the usage of `next()`.\n\n```\napp.get(\"/\", (res, req, next) => {\n  res.send(\"Hello \")\n  next()\n}, (res, req) => {\n  res.send(\"World\")\n})\n\n// These arrow functions are the middleware used above\n(res, req) => { res.send(\"Hello \"); next() }\n(res, req) => { res.send(\"World\") }\n\n// Client gets back: \"Hello World\"\n```\n\nA better solution is to define the functions and call them by their name instead of writing whole functions inside of our `app.get` parentheses.\n\n```\n// These functions are the middleware used below\nconst firstMiddleware = (res, req, next) => { res.send(\"Hello \"); next() }\nconst secondMiddleware = (res, req) => { res.send(\"World\") }\n\napp.get(\"/\", firstMiddleware, secondMiddleware)\n\n// Client gets back: \"Hello World\"\n```"
}